# -*- coding: utf-8 -*-
"""IA820_Greedy_best_first_search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/160EbINniV7phRfx42jZniy8yO6XpM23l
"""

formed_graph = [
    [0,118,140,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,80,99,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,146,97,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,211,0,0,0,0,0,0,0,0],
    [0,0,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,138,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,101,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,90,85,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,142,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
]

h_sld = {
    'Arad': 366,
    'Timisoara': 329,
    'Sibiu': 253,
    'Zerind': 374,
    'Lugoj': 244,
    'Rimnicu Vilcea': 193,
    'Fagaras': 176,
    'Oradea': 380,
    'Mehadia': 241,
    'Craiova': 160,
    'Pitesti': 100,
    'Bucarest': 0,
    'Drobeta': 242,
    'Giurgiu': 77,
    'Urziceni': 80,
    'Hirsova': 151,
    'Vaslui': 199,
    'Efoire': 161,
    'Iasi': 226,
    'Neamt': 234
}

def generate_states(graph):
    nodes_tuples = []
    nodes_connection_weights = []
    available_nodes_names = ['Arad','Timisoara','Sibiu','Zerind','Lugoj','Rimnicu Vilcea','Fagaras','Oradea','Mehadia','Craiova','Pitesti','Bucarest','Drobeta','Giurgiu','Urziceni','Hirsova','Vaslui','Efoire','Iasi','Neamt'] 
    for matrix_row_index in range(len(graph)):
        #print('matrix row' , graph[matrix_row_index])
        connections_and_weights = []
        for matrix_column_index in range(len(graph[0])):
            if graph[matrix_row_index][matrix_column_index] != 0:
                nodes_tuples.append((available_nodes_names[matrix_row_index], available_nodes_names[matrix_column_index]))
                connections_and_weights.append((available_nodes_names[matrix_column_index],graph[matrix_row_index][matrix_column_index]))
        if len(connections_and_weights) != 0:
            nodes_connection_weights.append([available_nodes_names[matrix_row_index], connections_and_weights])
    return nodes_tuples, nodes_connection_weights

#------------------------------------------------------------------------------------------------------------------------
def primero_voraz(tree,start,goal):
  path = [start]

  if start == goal:
    return path

  while True:
    nodo_actual = path[-1]

    hijos = [node_weights_list[1] for node_weights_list in tree[1] if node_weights_list[0] == nodo_actual]

    #print(hijos)

    hijos_con_h = []

    for hijo in hijos[0]:
          #print(hijo)
          valor_h = h_sld[hijo[0]]
          hijos_con_h.append((hijo[0],valor_h))

  #  print(hijos_con_h)
        #[('Timisoara', 329), ('Sibiu', 253), ('Zerind', 374)]

    valor_minimo = min(hijos_con_h)
    #print(valor_minimo)

    path.append(valor_minimo[0])

   # print(path)

    if path[-1] == goal:
         return path

#------------------------------------------------------------------------------------------------------------
def A_search(tree,start,goal):
  path = [start]

  if start == goal:
    return path

  while True:
    nodo_actual = path[-1]

    hijos = [node_weights_list[1] for node_weights_list in tree[1] if node_weights_list[0] == nodo_actual]

    #print(hijos)

    hijos_funcion=[]

    for hijo in hijos[0]:
          #print(hijo)
          valor_h = h_sld[hijo[0]]
          valor_f=hijo[1]+valor_h
          hijos_funcion.append((hijo[0],valor_f))
                       
    valor_minimo = min(hijos_funcion)
    #print(valor_minimo)
    path.append(valor_minimo[0])
    #print(path)

    if path[-1] == goal:
         return path  
#-----------------------------------------------------------------------------------------------------
def weighted_A_search(tree,start,goal):
  path = [start]

  if start == goal:
    return path

  while True:
    nodo_actual = path[-1]

    hijos = [node_weights_list[1] for node_weights_list in tree[1] if node_weights_list[0] == nodo_actual]

    #print(hijos)

    hijos_funcion=[]

    for hijo in hijos[0]:
          #print(hijo)
          valor_h = h_sld[hijo[0]]
          valor_f=hijo[1]+(1.3*valor_h)
          hijos_funcion.append((hijo[0],valor_f))
                       
    valor_minimo = min(hijos_funcion)
    #print(valor_minimo)
    path.append(valor_minimo[0])
    #print(path)

    if path[-1] == goal:
         return path  

#------------------------------------------------------------------------------------------------------
#def beam_search()




#----------------------------------------------------------------------------------------------------------------



def main():
    tree = generate_states(formed_graph)
    #print('\ntree = ', tree[0], '\n')
    print('weights = ', tree[1], '\n')

    start = 'Arad'
    goal = 'Bucarest'

    result1 = primero_voraz(tree,start,goal)
    print(result1)
    
    result2=A_search(tree, start, goal)
    print(result2)
    
    result3= weighted_A_search(tree, start, goal)
    print(result3)
main()
